NEED TO IMPLEMENT COMPLEX IDENTIFIER

statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement		: KEYWORD:return expr?
						: KEYWORD:CONTINUE
						: KEYWORD:BREAK
						: expr

expr        : KEYWORD:VAR IDENTIFIER EQ expr
            : complex-identifier EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  :	term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV|MOD) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : primary (POW factor)*

primary     : atom (LPAREN (expr (COMMA expr)*)? RPAREN)
            : atom

atom        : INT|FLOAT|STRING
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def
            : class-def
            : complex-identifier

complex-identifier  :   (KEYWORD:self '.')? IDENTIFIER ('.' IDENTIFIER)*
                    :   IDENTIFIER ('.' IDENTIFIER)*

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr LCURLY
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements RCURLY|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr LCURLY
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements RCURLY|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE
              statement
            | (NEWLINE statements RCURLY)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
              (KEYWORD:STEP expr)? LCURLY
              statement
            | (NEWLINE statements RCURLY)

while-expr  : KEYWORD:while expr LCURLY
              statement
            | (NEWLINE statements RCURLY)

func-def    : KEYWORD:func IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | LCURLY (NEWLINE statements RCURLY)

class-def   : KEYWORD:class IDENTIFIER (NEWLINE)* LCURLY NEWLINE statements RCURLY